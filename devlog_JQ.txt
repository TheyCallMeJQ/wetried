Devlog - Jacques
mm/dd/yyyy

05/12/2018
- Division of application of movement to better espouse notion of acceleration. In specific, splitting up the application of motion into three specific phases:
    - The beginning of motion (from rest to a given velocity)
        - This is straight-forward; we just progressively increase the current velocity by the acceleration (ensuring we don't surpass the terminal velocity).
    - The sustaining of the motion (increasing velocity by acceleration, up until we reach a terminal velocity)
    - The ending of motion (coming from any given velocity to rest at the center of the gridbox our movement is mapped to)
        - We should have access to the following information when this phase is triggered:
            - Distance until we come to rest
            - Time in which we want to come to rest, once within the given distance
            - Current velocity
        So from that, we can find the deceleration (the constant rate at which to decrease the velocity such that we come to rest at the given point) by triggering a FindDeceleration() function once we come to within a given distance until we come to rest. Specifically, we have deceleration formula
            D = (Vf - Vi) / t, such that
        D = Deceleration
        Vf = final velocity (0)
        Vi = current velocity
        t = time it takes to come to rest
        
05/14/2018 - (> Midnight)
I was wrong about the acceleration; we can split it into two phases, when we want to accelerate, and when we want to decelerate.
The deceleration itself is defined with respect to a new velocity value that we find based on the distance from the edge of the movement flag prefab's radius as well as the time in which we want to come to a stop. Fixed some minor bugs with the flag, too. We were able to make our velocity progressively greater by quickly spawning the flag multiple times or by spawning the flag, waiting for velocity to accumulate, and then clicking a wall.

05/14/2018
Right, today is the beginning of pathfinding.
Pseudocode for pathfinding algorithm follows:
- m_Path = new List<GridBoxes>() //Do we want this in PlayerMovement or GridClass? Probably PlayerMovement.

Add the following to the end of the CreatePlayerMovementFlag() function
    if player_to_flag leads through an onstructable (later improvement: or leads to gridboxes that are obstructed)
        then m_Path = GridClass::FindPath(int index_from, int index_to);
        //set it up such that we're consistently moving towards m_Path[0], and when we reach that point, we remove that entry from the list
        //It might be easier to do this for m_path.length - 1; whichever works best, it's the same basic concept.
    else 
        then just move normally immediately to the given point
        //maybe just add the point as m_Path[0] or m_Path[length - 1], depending on what we choose, for consistency

It might help to have a definition for the final point we're moving to (our destination) being something like
    if (m_Path.size == 1)
        then we're moving to the destination, or final point in our path
        
And for FindPath(int index_from, int index_to)
    //At this point we know that our destination lies beyond an obstructable
    From the destination gridbox, recursively search the neighborhood such that we establish each respective gridbox's distance from the target.
    //the target has distance 0
        for every gridbox neighbor
            mark the neighbor as checked and assign it distance += 1
        then check that gridbox's neighbors in turn
    //Note order is significant here. We first check all immediate neighbors, then search the subtrees one at a time    
    
05/20/2018
At this point we’ve implemented rudimentary pathfinding and made it look somewhat natural (the naturalization stems from us returning a path made up of specifically only the points we need to go to in order to avoid the obstructables, as opposed to the entire path).
Though there are some problems with the algorithm. At the moment, if we click inside a room with four sealed walls, we can still go inside it (though I suspect this may be a problem related to the naturalization function, or simply lack of foresight with respect to genuinely impossible paths - we’d always assumed the paths were possible up to now). The algorithm I’m using is also not the most efficient; turns out the algorithm I’m using now is called Djikstra’s algorithm (which checks absolutely all the slots, assigns them with distances, and then selects the best path). We should convert over to the A* Manhattan algorithm (which checks comparatively fewer of the slots for any one movement). 
Another thing we’ll need to work on is inter-grid movement. Specifically, we need to make it such that, if we say there are two grids in the scene, you need to be able to move from one grid to the other. Let’s start by refining the pathfinding, though.
So, changes to make:
    - Add instance variables to grid box class (all of which will need to be reset with each click):
		- distance from starting position to the given grid box, G
		- distance from finishing position to the given grid box, H, without regard for obstructables
		- total distance score for grid box, F, such that F = G + H
    So obviously we're gonna need to think up a way to count the distances  
    - Add instance variables to player movement class (Note: I've been thinking, and it might be nice to eventually have a more general Movement class and have PlayerMovement extend that. This way I can shorten the PlayerMovement class considerably and make the movement stuff applicable to enemies or whatever else needs to move)
        - Open list; list of gridboxes up for contention (how will we port this over to multiple grids?)
        - Closed list; list of gridboxes already considered
    So the way this should work is as follows:
        - We first add our current position to the closed list
        - We add our four immediate neighbors to the open list
        - We assign a score G + H = F to each element in the open list (don't bother ordering the list, it'll be quicker to just go through each element, later)
        - Add the grid box with the lowest F score to the closed list (remember, we always add to the end of the list when we invoke List<T>::Add()) and remove it from the open list
        - Find the immediate neighbors of the most recently added entry to the closed list, find their F values, and add them to the open list
        - Again, choose the one with the lowest F value and add it to the closed list, removing it from the open list in the process (NOTE: If at any point you have a situation where more than one grid box added to the open list have the lowest F value, then make sure you pick whichever grid box was most recently added to the open list).
        - Repeat until you arrive
  
05/25/2018		
Right, so lots of stuff has happened since the last entry; we figured out Pathfinding, developing both Manhattan A* and Djikstra algorithms. I’m still not sure which is best for what we want, though for now we’re using Djikstra because the naturalization of the path looks more… natural.
Checklist as of now:
	- Pathfinding bugs
	- Inventory
	- Generalization of Movement class, with PlayerMovement, CompanionMovement, and EnemyMovement.